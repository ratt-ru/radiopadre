#!/usr/bin/python

import os.path
import os
import subprocess
import sys
import select
import time
import re
import socket
import fnmatch

REPO = "git@github.com:ratt-ru/radiopadre.git"
BRANCH = "master"

LAUNCH = "run-radiopadre-server"

DEFAULT_NOTEBOOK_TARGET = "radiopadre-default.ipynb"

# get our radiopadre install directory. __file__ is RADIOPADRE/bin/run-radiopadre-server, so take the dirname twice
PADRE_PATH = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))

def find_unused_port (base,maxtries=1000):
    for i in range(maxtries):
        serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            serversocket.bind(("localhost", base))
            serversocket.close()
            return base
        except:
            base += 1
            continue
    return None

default_browser = os.environ.get("PADRE_BROWSER","xdg-open")

import argparse
parser = argparse.ArgumentParser(description="Uses ssh to connect to remote host, runs radiopadre notebook server "+
    "in the specified directory, loads the specified notebook(s) or a default notebook, if any. ")


parser.add_argument("-d","--docker",action="store_true",
                      help="runs remote radiopadre using a Docker image, even if a remote installation was found. Default "+
                           "is to use the remote installation if one is found, fall back to Docker otherwise.")
parser.add_argument("-D","--dev-docker",action="store_true",
                      help="runs remote radiopadre using a Docker image with a remote installation mapped on top. For developers.")
parser.add_argument("-i","--init",action="store_true",
                      help="automatically initialize remote radiopadre installation and virtual environment, if missing. "
                           "Forces use of remote installation and not Docker, unless combined with -D flag.")
parser.add_argument("-p","--remote-path",type=str,
                      help="directory in which remote radiopadre is installed. Default is to try ~/radiopadre first, "+
                      "and PATH second.")
parser.add_argument("-u","--update",action="store_true",
                      help="update remote radiopadre installation using git pull, or docker container using docker pull")
parser.add_argument("-b","--browser",type=str,default=default_browser,
                      help="browser command to run. Default is %(default)s, or set PADRE_BROWSER.")
parser.add_argument("-n","--no-browser",action="store_true",
                      help="do not open a browser for the notebooks.")
# parser.add_argument("-a","--auto",metavar="PATTERN",type=str, default=DEFAULT_NOTEBOOK_TARGET,
#                       help="Auto-open notebook(s) if they exist on remote, "+
#                         "and if a notebook is not explicitly specified on the command line. " +
#                         "Can be a wildcard pattern. Default is %default. Use -a none to disable auto-open.")
# parser.add_argument("-c","--copy",action="store_true",
#                       help="If notebook does not exist on the remote, try to copy a boilerplate.")
parser.add_argument("--docker-image", type=str, default="osmirnov/radiopadre:latest",
                      help="Which Docker image to use, for -d or -D modes. Default is %(default)s")
parser.add_argument("--reinstall", action="store_true",
                      help="Reinstall radiopadre virtual environment on remote.")
parser.add_argument("--no-casacore", action="store_true",
                      help="Ignore casacore installation errors, if installing on remote.")
parser.add_argument("--no-js9", action="store_true",
                      help="Ignore JS9 installation errors, if installing on remote.")
parser.add_argument("--verbose", action="store_true",
                      help="Enable verbose output.")
parser.add_argument("destination", nargs=1,
                      help="specify as host:directory[/notebook.ipynb]")

options = parser.parse_args()

if options.docker:
    if options.dev_docker:
        parser.error("Can't combine -d/--docker and -D/--dev-docker modes")
    if options.init:
        parser.error("Can't combine -d/--docker and -i/--init modes")

# parse path to notebook, if notebook even specified
dest = options.destination[0]
if ':' in dest:
    host, notebook_path = dest.split(":", 1)
else:
    host, notebook_path = dest, ""

print "radiopadre: Welcome!"
print "radiopadre: Will start remote radiopadre on {}:{}".format(host, notebook_path)

# Find remote run-radiopadre-server.sh script

if options.remote_path:
    padre_execs = [ os.path.join(options.remote_path,"bin",LAUNCH) ]
else:
    padre_execs = [ os.path.join("~/radiopadre/bin",LAUNCH), LAUNCH ]

DEVZERO = open("/dev/zero")
DEVNULL = open("/dev/null", "w")

SSH_MUX_OPTS = "-o ControlPath=/tmp/ssh_mux_radiopadre_%C -o ControlMaster=auto -o ControlPersist=1h".split()

SCP_OPTS = ["scp"] + SSH_MUX_OPTS
SSH_OPTS = ["ssh","-tt"] + SSH_MUX_OPTS + [host]
#SSH_OPTS = ["ssh"] + SSH_MUX_OPTS + [host]

# master ssh connection, to be closed when we exit
print "radiopadre: opening initial master connection to {} {}. You may be prompted for your password.".format(host, " ".join(SSH_OPTS))
ssh_master = subprocess.check_call(SSH_OPTS + ["exit"]) # stdin=sys.stdin, stdout=sys.stdout, stderr=sys.stderr)

# raw_input("Continue?")

def ssh_remote(command, fail_retcode=None, stderr=DEVNULL):
    """Runs command on remote host. Returns its output if the exit status is 0, or None if the exit status matches fail_retcode.

    Any other non-zero exit status (or any other error) will result in an exception.
    """
    try:
        return subprocess.check_output(SSH_OPTS+[command], stderr=stderr)
    except subprocess.CalledProcessError,exc:
        if exc.returncode == fail_retcode:
            return None
        raise

def ssh_remote_interactive(command, fail_retcode=None, stderr=DEVNULL):
    """Runs command on remote host. Returns its output if the exit status is 0, or None if the exit status matches fail_retcode.

    Any other non-zero exit status (or any other error) will result in an exception.
    """
    try:
        return subprocess.check_call(SSH_OPTS+[command], stderr=stderr)
    except subprocess.CalledProcessError,exc:
        if exc.returncode == fail_retcode:
            return None
        raise

def scp_to_remote(path, remote_path):
    return subprocess.check_output(SCP_OPTS+[path, "{}:{}".format(host, remote_path)])

def check_remote_file(remote_file, test="-x"):
    """
    Checks that a remote file exists. 'test' is specified bash-style, e.g. "-x" for executable.
    Can also use -f and -f, for example.
    Returns True or False, or raises an exception on other errors.
    """
    return ssh_remote("if [ {} {} ]; then exit 0; else exit 199; fi".format(test, remote_file),
                            fail_retcode=199, stderr=DEVNULL) is not None

def check_remote_command(command):
    """
    Checks that remote host has a particular command available.
    Returns True or False, or raises an exception on other errors.
    """
    return bool(ssh_remote("which "+command, fail_retcode=1, stderr=DEVNULL))

# Check for various remote bits

print "radiopadre: Checking installation on {}".format(host)
has_venv = check_remote_command("virtualenv") and check_remote_command("pip")
has_git = check_remote_command("git")
has_docker = check_remote_command("docker")

## Look for remote launch script

def help_yourself(problem, suggestion=None):
    print "radiopadre: {}".format(problem)
    print "radiopadre: Please ssh into {} and sort it out yourself, then rerun this script".format(host)
    if suggestion:
        print "radiopadre: ({})".format(suggestion)
    sys.exit(1)        

bootstrap = False

# look for remote installation, unless we're explicitly set to docker mode

if not options.docker:
    for padre_exec in padre_execs:
        if check_remote_file(padre_exec):
            print "radiopadre: Found remote radiopadre launch script at {}:{}".format(host, padre_exec)
            if options.update:
                padre_dir = os.path.dirname(os.path.dirname(padre_exec))
                print "radiopadre: --update specified, will try a git pull in {}".format(padre_dir)
                try:
                    ssh_remote("cd {} ; git checkout {}; git pull".format(padre_dir, BRANCH))
                except subprocess.CalledProcessError,exc:
                    print exc.output
                    help_yourself("git pull failed with exit code {}".format(exc.returncode))
            break
    else:
        print "radiopadre: No radiopadre launch script ({}) found on {}".format(LAUNCH, host)
        if options.init:
            install_path = options.remote_path or "~/radiopadre"
            print "radiopadre: I could try to bootstrap a radiopadre installation into {}:{}".format(host, install_path)

            if not has_git:
                help_yourself("However, I don't see git installed on {}".format(host),
                              "Try 'sudo apt instal git' on {}".format(host))

            if check_remote_file(install_path, "-d"):
                print "radiopadre: However, the directory {}:{} already exists, so I'd rather not!".format(host, install_path)
                help_yourself("This may be a sign of a broken radiopadre installation on {},".format(host),
                              "(For example, remove {}:{} to bootstrap from scratch.)".format(host, install_path))

            print "radiopadre: (command would be 'git clone -b {} {} radiopadre')".format(BRANCH, REPO)

            # try the bootstrap
            print "radiopadre: Cloning {}, branch {} into {}:~/radiopadre".format(REPO, BRANCH, host)
            ssh_remote_interactive("git clone -b {} {} radiopadre".format(BRANCH, REPO))
            padre_exec = os.path.join(install_path, "bin", LAUNCH)
            if not check_remote_file(padre_exec):
                help_yourself("git clone ran, but I still don't see the launch script {}:{}".format(host, padre_exec))
            print "radiopadre: Success! Running remote in bootstrap mode"
            bootstrap = True
        elif options.dev_docker:
            print "radiopadre: no remote installation detected and -i/--init not given: can't run -D/--dev-docker mode"
            sys.exit(1)
        else:
            print "radiopadre: no remote installation detected, falling back to Docker mode"
            options.docker = True

# look for remote virtualenv, unless we're in docker mode

if not options.docker:
    ## Check for remote virtualenv
    remote_venv = "~/.radiopadre/venv"
    if not options.reinstall and check_remote_file(remote_venv + "/.complete", "-f"):
        activate_script = "{}/bin/activate".format(remote_venv)
        print "radiopadre: Testing the remote virtual environment at {}:{}".format(host, remote_venv)
        try:
            ssh_remote("source {}".format(activate_script))
        except subprocess.CalledProcessError,exc:
            print exc.output
            help_yourself("The remote virtual environment at {}:{} exists, but we can't seem to activate it".format(host, remote_venv),
                          "Perhaps remove {}:{}, and I'll try to rebuild it from scratch.".format(host, remote_venv))
    else:
        if options.init:
            if options.reinstall:
                print "radiopadre: --reinstall given, will reinstall remote virtual environment"
            else:
                print "radiopadre: Missing or incomplete remote virtual environment at {}:{}, but I can create it".format(host, remote_venv)
            if not has_venv:
                help_yourself("However, I don't see virtualenv and/or pip installed on {}".format(host),
                              "Try 'sudo apt instal virtualenv pip' on {}".format(host))

            if bootstrap and not options.reinstall:
                print "radiopadre: Since we're bootstrapping a new installation, I will proceed to do so"

            bootstrap = True
        else:
            print "radiopadre: no remote virtual environment detected, falling back to Docker mode"
            options.docker = True

# OK: docker mode
if options.docker:
    if not has_docker:
        help_yourself("{} doesn't appear to have Docker installed.".format(host),
                      "Ask the admin to install Docker on {} and to add you to the docker group. Otherwise, use "
                      "-i/--init to run radiopadre in remote installation mode.".format(host))

    print "radiopadre: copying run script and default notebook to {}:.radiopadre/tmp".format(host)
    ssh_remote("mkdir -p ~/.radiopadre/tmp/bin ~/.radiopadre/tmp/notebooks")
    scp_to_remote(PADRE_PATH + "/bin/run-radiopadre-server", ".radiopadre/tmp/bin")
    scp_to_remote(PADRE_PATH + "/notebooks/radiopadre-default.ipynb", ".radiopadre/tmp/notebooks")
    padre_exec = "~/.radiopadre/tmp/bin/run-radiopadre-server -d --docker-image " + options.docker_image
    if options.update:
        padre_exec += " --docker-pull"

elif options.dev_docker:
    padre_exec += " -D --docker-image " + options.docker_image
    if options.update:
        padre_exec += " --docker-pull"

if bootstrap:
    padre_exec += " --bootstrap"
if options.reinstall:
    padre_exec += " --reinstall"
if options.no_casacore:
    padre_exec += " --no-casacore"
if options.no_js9:
    padre_exec += " --no-js9"
if options.verbose:
    padre_exec += " --verbose"

padre_exec += "  --remote " + notebook_path

# start ssh subprocess to launch notebook
args = list(SSH_OPTS) + [padre_exec]

ssh = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

# poll stdout/stderr
poller = select.poll()
fdlabels = {}

def register_process (po, label=""):
    poller.register(po.stdout)
    poller.register(po.stderr)
    fdlabels[po.stdout.fileno()] = '{} {}'.format(host, label), po.stdout
    fdlabels[po.stderr.fileno()] = '{} {} stderr'.format(host, label), po.stderr

register_process(ssh,"ssh")

ssh2 = None
local_ports = []
remote_ports = None
session_id = None
urls = []
remote_running = False

while True:
    try:
        fdlist = poller.poll()
        for fd,event in fdlist:
            line = None
            if event & (select.POLLHUP|select.POLLERR):
                print "radiopadre: ssh to {} complete, exiting".format(host)
                sys.exit(0)
            # which fd is ready? read line and print it
            label,fobj = fdlabels.get(fd)
            line = fobj.readline().strip()
            #if fobj is not ssh.stderr:
            print "\r%s: %s\r" % (label,line)
            if not line:
                continue
            # if remote is not yet started, check output
            if not remote_running:
                # check for session ID
                match = re.match(".*Session ID/notebook token is '([0-9a-f]+)'", line)
                if match:
                    session_id = match.group(1)
                # check for notebook port, and launch second ssh when we have it
                match = re.match(".*Selected ports: ([\d]+):([\d]+):([\d]+)[\s]*$",line)
                if match:
                    remote_jupyter_port, remote_js9helper_port, remote_http_port = remote_ports = match.groups()
                    print "radiopadre: Detected remote ports %s:%s:%s\r" % tuple(remote_ports)

                    ssh2_args = ["ssh"] + SSH_MUX_OPTS + ["-O", "forward", host]
                    local_ports = []
                    starting_local_port = 10000+os.getuid()
                    for remoteport in remote_ports:
                        # find unused local port
                        localport = find_unused_port(starting_local_port)
                        local_ports.append(localport)
                        starting_local_port = localport+1
                        print "radiopadre: remote port %s, selecting local port %s\r" % (remoteport, localport)
                        ssh2_args += [ "-L", "localhost:%s:localhost:%s" % (localport, remoteport) ]
                    # start second ssh process to forward the port
                    print "radiopadre: sending forward request to ssh mux process".format(ssh2_args)
                    subprocess.call(ssh2_args)

                    # tell first ssh process the ports we have selected
                    print "radiopadre: Passing local port assignments to remote end"
                    ssh.stdin.write("{} {} {}\n".format(*local_ports))

                # check for launch URL
                match = re.match(".*Browse to URL: ([^\s]+)", line)
                if match:
                    urls.append(match.group(1))

                if "The Jupyter Notebook is running at" in line:
                    remote_running = True
                    for url in urls:
                        # open browser if needed
                        if not options.no_browser:
                            print "radiopadre: Opening browser for {}\r".format(url)
                            subprocess.Popen([options.browser, url])
                        else:
                            print "-n/--no-browser given, not opening a browser for you\r"
                            print "Please surf to {}\n".format(url)
    except KeyboardInterrupt:
        print "radiopadre: Ctrl+C caught"
#        print "radiopadre: sending exit request to ssh mux process..."
#        raw_input("Continue?")
#        subprocess.call(SSH_OPTS + ["-O", "exit", host])
#        raw_input("Sent. Continue?")
        print "radiopadre: killing main ssh process..."
        ssh.kill()

os.system("reset")
