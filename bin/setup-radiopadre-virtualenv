#!/usr/bin/env python3
import os
import subprocess
import sys
import shutil

# get radiopadre install source directory
# This is where we're installing from. If called with --editable, stuff in this
# directory needs to be symlinked to. Otherwise, assume the directory is temporary, and copy from it
PADRE_PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

JS9_REPO = "https://github.com/ericmandel/js9.git"
JS9_DIR = PADRE_PATH + "/js9"

CARTA_LINK = "https://github.com/CARTAvis/carta-releases/releases/download/v1.2.2/CARTA-v1.2.2-remote.tgz"
SOCKET_IO_LINK = "https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"

import argparse
parser = argparse.ArgumentParser(description="Installs radiopadre components inside an existing virtual environment")

parser.add_argument("-e", "--editable", action="store_true",
                    help="install in editable mode (use with pip install -e)")

parser.add_argument("--js9", metavar="DIR", type=str,
                    help="JS9 source directory or repository URL. Default is to try {JS9_DIR}, then {JS9_REPO}. "
                       "Set to 'git' to force use of {JS9_REPO}.".format(**globals()))

parser.add_argument("--no-js9", action="store_true",
                    help="skips the JS9 installation. FITS functionality will be reduced.")

parser.add_argument("--cfitsio-path", metavar="DIR", type=str, default="/usr",
                    help="path to cfitsio installation. Default is %(default)s")

parser.add_argument("--inside-container", action="store_true",
                    help=argparse.SUPPRESS)
parser.add_argument("--skip-git-pull", action="store_true",
                    help=argparse.SUPPRESS)

options = parser.parse_args()

if not options.inside_container:
    PADRE_WORKDIR = os.path.expanduser("~/.radiopadre")
else:
    PADRE_WORKDIR = "/.radiopadre"

def message(x, prefix='setup-radiopadre-virtualenv: '):
    print(prefix + x.format(**globals()))

def bye(x, code=1):
    message(x)
    sys.exit(code)

def shell(cmd):
    return subprocess.check_call(cmd.format(**globals()), shell=True)

def which(cmd):
    return subprocess.check_output("which {}".format(cmd), shell=True).strip()

def remove_installation(path):
    if os.path.lexists(path):
        if os.path.islink(path) or os.path.isfile(path):
            message(f"Removing existing symlink or file {path}")
            os.unlink(path)
        elif os.path.isdir(path):
            message(f"Removing existing directory {path}")
            shutil.rmtree(path, ignore_errors=True)
        else:
            bye(f"{path} is neither a dir nor a symlink nor a file, don't know how to proceed")


# See https://stackoverflow.com/questions/1871549/determine-if-python-is-running-inside-virtualenv
if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
    message("Setting up radiopadre inside virtualenv {sys.prefix}")
    PADRE_VENV = sys.prefix
else:
    bye("Not running in a virtualenv")

# check for JS9 requirements
if not options.no_js9:
    try:
        nodejs = subprocess.check_output("which nodejs || which node", shell=True)
    except subprocess.CalledProcessError:
        if os.path.exists(PADRE_VENV):
            open(PADRE_VENV + "/js9status", "w").write("nodejs missing")
        bye("Unable to find nodejs or node -- can't install JS9. Try apt-get install nodejs perhaps, or run with --no-js9")

# Look for virtualenv. Burn it down if it needs a refresh.
complete_cookie = os.path.join(PADRE_VENV, ".radiopadre.install.complete")

# Create workdir if needed
if not os.path.exists(PADRE_WORKDIR):
    message("Creating {PADRE_WORKDIR}")
    os.mkdir(PADRE_WORKDIR)

# get jupyter base path
notebook_dir = f"{PADRE_VENV}/lib/python3.6/site-packages"

# init radiopadre kernel etc.
message("Creating radiopadre jupyter kernel")
# if options.inside_container:
#     python, jupyter, user = "python", "jupyter", ""
# else:
#python, jupyter, user = f"{PADRE_VENV}/bin/python3", f"{PADRE_VENV}/bin/jupyter"
cmd = f"{PADRE_VENV}/bin/python3 -m ipykernel install --sys-prefix --name radiopadre"
message(f"  {cmd}")
if shell(cmd):
    bye("jupyter kernel failed to install, see log above")

# # get path to it because we want to install our own kernel.js
# out = kerneldir = ''
# try:
#     out = subprocess.check_output(f"{jupyter} kernelspec list", shell=True)
# except subprocess.CalledProcessError:
#     bye("jupyter kernelspec list failed, see log above")
#
# for line in out.decode().split("\n"):
#     columns = line.strip().split()
#     if columns[0] == "radiopadre":
#         kerneldir = columns[1]
#         break
# else:
#     bye("jupyter kernelspec list did not return the radiopadre kernel. This is a bug?")

kerneldir = f"{PADRE_VENV}/share/jupyter/kernels/radiopadre"
message("Copying kernel.js to {kerneldir}")
shutil.copy2(f"{PADRE_PATH}/html/radiopadre-kernel.js", f"{kerneldir}/kernel.js")

notebook_static = f"{notebook_dir}/notebook/static"

# download socket.io.js
message("Downloading socket.io.js into {notebook_static}")
shell(f"wget {SOCKET_IO_LINK} -O {notebook_static}/socket.io.js")

# add link to radiopadre web components in notebook static dir
notebook_padre_www = f"{notebook_static}/radiopadre-www"
padre_www = f"{PADRE_PATH}/html"
remove_installation(notebook_padre_www)
if options.editable:
    message("making link from {notebook_padre_www} to {padre_www}")
    os.symlink(padre_www, notebook_padre_www)
else:
    message("copying {notebook_padre_www} to {padre_www}")
    shutil.copytree(padre_www, notebook_padre_www)

# add link to CARTA
carta_tarball = os.path.basename(CARTA_LINK)
carta_base    = os.path.splitext(carta_tarball)[0]
carta_dir     = os.path.join(PADRE_VENV, carta_base)
carta_link    = os.path.join(PADRE_VENV, "carta")

remove_installation(carta_dir)
remove_installation(carta_link)

# download tarball
carta_tarball_path = os.path.join(PADRE_PATH, carta_tarball)
if os.path.exists(carta_tarball_path):
    message(f"CARTA tarball {carta_tarball_path} is already here")
else:
    message(f"Trying to download CARTA via {CARTA_LINK}")
    subprocess.check_call(f"cd {PADRE_PATH}; wget -c {CARTA_LINK}", shell=True)
    if not os.path.exists(carta_tarball_path):
        bye(f"{carta_tarball} failed to download")

# unpack (here or in venv)
if options.editable:
    message(f"Unpacking {carta_tarball} in {PADRE_PATH}")
    subprocess.check_call(f"cd {PADRE_PATH}; tar zxf {carta_tarball}", shell=True)
    carta_padre_dir = os.path.join(PADRE_PATH, carta_base)
    message(f"Linking {carta_dir} to {carta_padre_dir}")
    os.symlink(carta_padre_dir, carta_dir)
else:
    message(f"Unpacking {carta_tarball} in {PADRE_VENV}")
    subprocess.check_call(f"cd {PADRE_VENV}; tar zxf {carta_tarball_path}", shell=True)

if os.path.exists(carta_dir):
    message(f"Linking {carta_link} to {carta_dir}")
    os.symlink(carta_dir, carta_link)
else:
    message(f"WARNING: No CARTA installation ({carta_dir}) found")

# install JS9
if not options.no_js9:
    js9status = open(PADRE_VENV + "/js9status", "w")

    # install JS9 inside venv
    # determine whether to use existing directory or repo
    js9_git = js9_dir = js9_temp = None
    if options.js9:
        if options.js9 == 'git':
            js9_git = JS9_REPO
            message("Will clone JS9 from default location ({JS9_REPO})")
        elif options.js9.split(":")[0] in ["http", "git"]:
            js9_git = options.js9
            message("Will clone JS9 from {js9_git}")
        elif os.path.isdir(options.js9):
            js9_dir = options.js9
            message("Will install JS9 from local directory {js9_dir}")
        else:
            js9status.write("not a valid repo")
            bye("--js9 {options.js9}: not a valid directory or git repository")
    elif os.path.isdir(JS9_DIR):
        js9_dir = JS9_DIR
        message("Will install JS9 from default directory {js9_dir}")
    else:
        js9_git = JS9_REPO
        message("{JS9_DIR} not found. Will clone JS9 from default location ({JS9_REPO})")

    # Run git clone if needed
    if js9_git:
        if os.access(PADRE_PATH, os.W_OK) and not os.path.exists(JS9_DIR):
            js9_dir = JS9_DIR
        else:
            import tempfile
            js9_dir = js9_temp = tempfile.mkdtemp(prefix="js9")
        message("Cloning {js9_git} into {js9_dir}")
        if shell("git clone {js9_git} {js9_dir}") != 0:
            js9status.write("git clone failed")
            bye("Failed to clone JS9 repo, see log above")
    else:
        if js9_dir == JS9_DIR and os.access(JS9_DIR, os.W_OK) and os.path.exists(JS9_DIR + "/.git"):
            if not options.skip_git_pull:
                message("Will do a git pull in {js9_dir}")
                if shell("git -C {js9_dir} pull") != 0:
                    js9status.write("git pull failed")
                    bye("Failed to git pull in JS9 directory, see log above")

    # Configure and install
    js9_www = PADRE_VENV + "/js9-www"
    if subprocess.call("""cd {js9_dir} && \
            ./configure --prefix={PADRE_VENV} --with-webdir={js9_www} --with-helper=nodejs --with-cfitsio={options.cfitsio_path} && \
            make && make install""".format(**globals()), shell=True):
        js9status.write("build failed")
        bye("Failed to configure and/or build JS9 in {js9_dir}, see log above. Fix it, or run with --no-js9.")

    # check for cfitsio
    try:
        output = subprocess.check_output("grep FITSLIB {js9_dir}/config.log".format(**globals()), shell=True)
        if output.strip() != b"FITSLIB='cfitsio'":
            raise subprocess.CalledProcessError("cfitsio",-1,"no cfitsio")
    except subprocess.CalledProcessError:
        js9status.write("cfitsio missing")
        bye("JS9 did not find the cfitsio library. Try installing it (apt install libcfitsio-dev), and/or specifying"
            " the path to it with --cfitsio-path, and/or running with --no-js9 if you're really stuck.")

    # add colormap definitions from matplotlib
    message("copying extra colormap definitions to {js9_www}")
    shutil.copy2(f"{PADRE_PATH}/html/js9colormaps.js", js9_www)

    # Make symlink to js9 install dir in notebook dir
    notebook_js9_www = notebook_dir + "/notebook/static/js9-www"
    
    remove_installation(notebook_js9_www)
    if options.editable:
        message("making link from {notebook_js9_www} to {js9_www}")
        os.symlink(js9_www, notebook_js9_www)
    else:
        message("copying {js9_www} to {notebook_js9_www}")
        shutil.copytree(js9_www, notebook_js9_www)

    notebook_socket_io = notebook_dir + "/notebook/static/socket.io.js"
    js9_socket_io = js9_www + "/node_modules/socket.io-client/dist/socket.io.js"
    
    remove_installation(notebook_socket_io)
    
    if options.editable:
        message("making link from {notebook_socket_io} to {js9_socket_io}")
        os.symlink(js9_socket_io, notebook_socket_io)
    else:
        message("copying {js9_socket_io} to {notebook_socket_io}")
        shutil.copy2(js9_socket_io, notebook_socket_io)

    # copy config
    shutil.copy2(PADRE_PATH + "/js9-config/js9prefs.js", js9_www)
    shutil.copy2(PADRE_PATH + "/js9-config/js9Prefs.json", js9_www)

    if js9_temp:
        message("Removing JS9 source directory {js9_temp}")
        shutil.rmtree(js9_temp)

    js9status.write(os.path.abspath(js9_www))


open(complete_cookie, "w").write("installed by {__file__}".format(**globals()))

message("Installation successful!")
